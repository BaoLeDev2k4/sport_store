import { useEffect, useState, useContext } from 'react';
import { fetchVouchers, validateVoucher, type Voucher } from '../api/couponApi';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import { useCart } from '../context/CartContext';
import { toast } from 'react-toastify';
import '../scss/_voucher.scss';

const VoucherPage = () => {
  const [vouchers, setVouchers] = useState<Voucher[]>([]);
  const [error, setError] = useState('');
  const [applyingVoucher, setApplyingVoucher] = useState<string | null>(null);

  const navigate = useNavigate();
  const { user } = useContext(AuthContext);
  const { cart } = useCart();

  useEffect(() => {
    fetchVouchers()
      .then((res) => setVouchers(res.data))
      .catch(() => setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu voucher. Vui l√≤ng th·ª≠ l·∫°i sau.'));
  }, []);

  const handleApplyVoucher = async (voucherCode: string) => {
    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if (!user) {
      toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng voucher.');
      navigate('/auth');
      return;
    }

    // Ki·ªÉm tra gi·ªè h√†ng
    if (!cart || cart.length === 0) {
      toast.error('Gi·ªè h√†ng tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi √°p d·ª•ng voucher.');
      navigate('/products');
      return;
    }

    // T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
    const orderAmount = cart.reduce((sum, item) => sum + item.variant.price * item.quantity, 0);

    setApplyingVoucher(voucherCode);

    try {
      const response = await validateVoucher(voucherCode, orderAmount);
      const { voucher } = (response as any).data;

      // L∆∞u voucher v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng trong checkout
      localStorage.setItem('selectedVoucher', JSON.stringify(voucher));

      toast.success(`√Åp d·ª•ng voucher ${voucherCode} th√†nh c√¥ng! Gi·∫£m ${voucher.discount.toLocaleString()}‚Ç´`);

      // Chuy·ªÉn ƒë·∫øn trang checkout
      navigate('/checkout');
    } catch (error: any) {
      toast.error(error.response?.data?.message || 'Voucher kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
    } finally {
      setApplyingVoucher(null);
    }
  };

  return (
    <div className="voucher-page">
      <h2>Kho Voucher</h2>

      {error && <div className="voucher-error">{error}</div>}

      <div className="voucher-list">
        {vouchers.map((v, idx) => (
          <div key={idx} className="voucher-card">
            <div className="voucher-code">
              <span className="voucher-icon">üè∑Ô∏è</span>
              <span className="voucher-label">M√£:</span>
              <span className="voucher-value">{v.code}</span>
            </div>
            <p>{v.description}</p>
            <div className="voucher-info">
              <span><strong>Gi·∫£m:</strong> {v.discount.toLocaleString()}‚Ç´</span>
              <span><strong>HSD:</strong> {new Date(v.end_date).toLocaleDateString()}</span>
              <span><strong>S·ªë l∆∞·ª£ng:</strong> {v.quantity}</span>
              {v.min_order_amount && v.min_order_amount > 0 && (
                <span className="min-order-condition">
                  <strong>ƒêi·ªÅu ki·ªán:</strong> ƒê∆°n h√†ng t·ª´ {v.min_order_amount.toLocaleString()}‚Ç´
                </span>
              )}
              <span
                className={
                  v.canUse ? 'voucher-status active' :
                  v.isExpired ? 'voucher-status expired' :
                  v.isOutOfStock ? 'voucher-status out-of-stock' :
                  v.isNotStarted ? 'voucher-status not-started' :
                  'voucher-status inactive'
                }
              >
                <strong>Tr·∫°ng th√°i:</strong>{' '}
                {v.canUse ? 'C√≥ th·ªÉ s·ª≠ d·ª•ng' :
                 v.isExpired ? 'ƒê√£ h·∫øt h·∫°n' :
                 v.isOutOfStock ? 'H·∫øt s·ªë l∆∞·ª£ng' :
                 v.isNotStarted ? 'Ch∆∞a b·∫Øt ƒë·∫ßu' :
                 'Kh√¥ng ho·∫°t ƒë·ªông'}
              </span>
            </div>

            {/* N√∫t √°p d·ª•ng voucher */}
            <div className="voucher-actions">
              <button
                className={`apply-voucher-btn ${!v.canUse ? 'disabled' : ''}`}
                onClick={() => handleApplyVoucher(v.code)}
                disabled={!v.canUse || applyingVoucher === v.code}
              >
                {applyingVoucher === v.code ? 'ƒêang √°p d·ª•ng...' :
                 !v.canUse ? 'Kh√¥ng th·ªÉ s·ª≠ d·ª•ng' : '√Åp d·ª•ng'}
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default VoucherPage;
